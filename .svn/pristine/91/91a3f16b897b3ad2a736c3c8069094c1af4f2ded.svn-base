//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppApi.App_Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class TCRMEntities : DbContext
    {
        public TCRMEntities()
            : base("name=TCRMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AnalysisDef_T> AnalysisDef_T { get; set; }
        public DbSet<AnalysisGroup_T> AnalysisGroup_T { get; set; }
        public DbSet<AnalysisRoot_T> AnalysisRoot_T { get; set; }
        public DbSet<Branch_T> Branch_T { get; set; }
        public DbSet<Calendar_T> Calendar_T { get; set; }
        public DbSet<Chance_T> Chance_T { get; set; }
        public DbSet<ChancePro_T> ChancePro_T { get; set; }
        public DbSet<ChanceSumup_T> ChanceSumup_T { get; set; }
        public DbSet<CheckResult_T> CheckResult_T { get; set; }
        public DbSet<Circle_T> Circle_T { get; set; }
        public DbSet<CircleGroup_T> CircleGroup_T { get; set; }
        public DbSet<Client_T> Client_T { get; set; }
        public DbSet<ClientAdd_T> ClientAdd_T { get; set; }
        public DbSet<ClientAddCopy_T> ClientAddCopy_T { get; set; }
        public DbSet<ClientBackLog_T> ClientBackLog_T { get; set; }
        public DbSet<ClientCare_T> ClientCare_T { get; set; }
        public DbSet<ClientComment_T> ClientComment_T { get; set; }
        public DbSet<ClientComplain_T> ClientComplain_T { get; set; }
        public DbSet<ClientCopy_T> ClientCopy_T { get; set; }
        public DbSet<ClientFollow_T> ClientFollow_T { get; set; }
        public DbSet<ClientJoinLog_T> ClientJoinLog_T { get; set; }
        public DbSet<ClientJoinLogMain_T> ClientJoinLogMain_T { get; set; }
        public DbSet<ClientLabel_T> ClientLabel_T { get; set; }
        public DbSet<ClientLimit_T> ClientLimit_T { get; set; }
        public DbSet<ClientMerger_T> ClientMerger_T { get; set; }
        public DbSet<ClientPro_T> ClientPro_T { get; set; }
        public DbSet<ClientPubLimit_T> ClientPubLimit_T { get; set; }
        public DbSet<ClientPubRule_T> ClientPubRule_T { get; set; }
        public DbSet<ClientPubRuleIf1_T> ClientPubRuleIf1_T { get; set; }
        public DbSet<ClientPubRuleIf2_T> ClientPubRuleIf2_T { get; set; }
        public DbSet<ClientSale_T> ClientSale_T { get; set; }
        public DbSet<ClientSalePub_T> ClientSalePub_T { get; set; }
        public DbSet<CodeRule_T> CodeRule_T { get; set; }
        public DbSet<Collect_T> Collect_T { get; set; }
        public DbSet<ColumnSet_T> ColumnSet_T { get; set; }
        public DbSet<ColumnSetMy_T> ColumnSetMy_T { get; set; }
        public DbSet<Comm_T> Comm_T { get; set; }
        public DbSet<CompanyInfo_T> CompanyInfo_T { get; set; }
        public DbSet<CustomFind_T> CustomFind_T { get; set; }
        public DbSet<CustomsClient_T> CustomsClient_T { get; set; }
        public DbSet<CustomsData_T> CustomsData_T { get; set; }
        public DbSet<CustomsHsPro_T> CustomsHsPro_T { get; set; }
        public DbSet<CustomsRelation_T> CustomsRelation_T { get; set; }
        public DbSet<CustomsZc_T> CustomsZc_T { get; set; }
        public DbSet<CustomsZcTj_T> CustomsZcTj_T { get; set; }
        public DbSet<DataCompetitor_T> DataCompetitor_T { get; set; }
        public DbSet<DataCompetitorClient_T> DataCompetitorClient_T { get; set; }
        public DbSet<DataCompetitorPro_T> DataCompetitorPro_T { get; set; }
        public DbSet<DataLiarEmail_T> DataLiarEmail_T { get; set; }
        public DbSet<DateNum_T> DateNum_T { get; set; }
        public DbSet<Delta_T> Delta_T { get; set; }
        public DbSet<Dept_T> Dept_T { get; set; }
        public DbSet<Dictionary_T> Dictionary_T { get; set; }
        public DbSet<DiskTopMy_T> DiskTopMy_T { get; set; }
        public DbSet<Doc_T> Doc_T { get; set; }
        public DbSet<EdmAddress_T> EdmAddress_T { get; set; }
        public DbSet<EdmGroup_T> EdmGroup_T { get; set; }
        public DbSet<EdmModel_T> EdmModel_T { get; set; }
        public DbSet<EdmTask_T> EdmTask_T { get; set; }
        public DbSet<EdmTaskAddress_T> EdmTaskAddress_T { get; set; }
        public DbSet<ExcelModelConfig_T> ExcelModelConfig_T { get; set; }
        public DbSet<File_T> File_T { get; set; }
        public DbSet<FileStore_T> FileStore_T { get; set; }
        public DbSet<FwIntMail_T> FwIntMail_T { get; set; }
        public DbSet<FwIntMailSet_T> FwIntMailSet_T { get; set; }
        public DbSet<FwRuleMail_T> FwRuleMail_T { get; set; }
        public DbSet<Group_T> Group_T { get; set; }
        public DbSet<GroupAdmin_T> GroupAdmin_T { get; set; }
        public DbSet<GroupUser_T> GroupUser_T { get; set; }
        public DbSet<ImportLog_T> ImportLog_T { get; set; }
        public DbSet<Inquiry_T> Inquiry_T { get; set; }
        public DbSet<InquiryPro_T> InquiryPro_T { get; set; }
        public DbSet<Know_T> Know_T { get; set; }
        public DbSet<KnowFAQ_T> KnowFAQ_T { get; set; }
        public DbSet<KnowLabel_T> KnowLabel_T { get; set; }
        public DbSet<KnowTest_T> KnowTest_T { get; set; }
        public DbSet<KnowTestFAQ_T> KnowTestFAQ_T { get; set; }
        public DbSet<KnowTestFAQResult_T> KnowTestFAQResult_T { get; set; }
        public DbSet<KnowTestResult_T> KnowTestResult_T { get; set; }
        public DbSet<Log_T> Log_T { get; set; }
        public DbSet<MailBlack_T> MailBlack_T { get; set; }
        public DbSet<MailBox_T> MailBox_T { get; set; }
        public DbSet<MailBoxRoot_T> MailBoxRoot_T { get; set; }
        public DbSet<MailBoxRootComm_T> MailBoxRootComm_T { get; set; }
        public DbSet<MailBoxSet_T> MailBoxSet_T { get; set; }
        public DbSet<MailBoxShare_T> MailBoxShare_T { get; set; }
        public DbSet<MailBoxType_T> MailBoxType_T { get; set; }
        public DbSet<MailBoxZn_T> MailBoxZn_T { get; set; }
        public DbSet<MailKey_T> MailKey_T { get; set; }
        public DbSet<MailLabel_T> MailLabel_T { get; set; }
        public DbSet<MailLiar_T> MailLiar_T { get; set; }
        public DbSet<MailMod_T> MailMod_T { get; set; }
        public DbSet<MailMov_T> MailMov_T { get; set; }
        public DbSet<MailRule_T> MailRule_T { get; set; }
        public DbSet<MailRuleIf_T> MailRuleIf_T { get; set; }
        public DbSet<MailRuleLog_T> MailRuleLog_T { get; set; }
        public DbSet<MailText_T> MailText_T { get; set; }
        public DbSet<Menu_T> Menu_T { get; set; }
        public DbSet<Msg_T> Msg_T { get; set; }
        public DbSet<MsgUser_T> MsgUser_T { get; set; }
        public DbSet<Pending_T> Pending_T { get; set; }
        public DbSet<PowerList_T> PowerList_T { get; set; }
        public DbSet<Product_T> Product_T { get; set; }
        public DbSet<ProductBatchPrice_T> ProductBatchPrice_T { get; set; }
        public DbSet<ProductPriceLog_T> ProductPriceLog_T { get; set; }
        public DbSet<ProductRoot_T> ProductRoot_T { get; set; }
        public DbSet<ProductRootPower_T> ProductRootPower_T { get; set; }
        public DbSet<Provider_T> Provider_T { get; set; }
        public DbSet<ProviderAdd_T> ProviderAdd_T { get; set; }
        public DbSet<ProviderPro_T> ProviderPro_T { get; set; }
        public DbSet<Quote_T> Quote_T { get; set; }
        public DbSet<QuoteModel_T> QuoteModel_T { get; set; }
        public DbSet<QuoteProduct_T> QuoteProduct_T { get; set; }
        public DbSet<Role_T> Role_T { get; set; }
        public DbSet<RolePower_T> RolePower_T { get; set; }
        public DbSet<RoleUser_T> RoleUser_T { get; set; }
        public DbSet<Samples_T> Samples_T { get; set; }
        public DbSet<SamplesModel_T> SamplesModel_T { get; set; }
        public DbSet<SamplesProduct_T> SamplesProduct_T { get; set; }
        public DbSet<Sell_T> Sell_T { get; set; }
        public DbSet<SellProduct_T> SellProduct_T { get; set; }
        public DbSet<SendMailLog_T> SendMailLog_T { get; set; }
        public DbSet<SendSample_T> SendSample_T { get; set; }
        public DbSet<ServerConfig_T> ServerConfig_T { get; set; }
        public DbSet<ServerConfigType_T> ServerConfigType_T { get; set; }
        public DbSet<Stock_T> Stock_T { get; set; }
        public DbSet<StockProduct_T> StockProduct_T { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<SysDictionary_T> SysDictionary_T { get; set; }
        public DbSet<SysDictionaryClass_T> SysDictionaryClass_T { get; set; }
        public DbSet<TempImg_T> TempImg_T { get; set; }
        public DbSet<Thumb_T> Thumb_T { get; set; }
        public DbSet<TimeZhou_T> TimeZhou_T { get; set; }
        public DbSet<User_T> User_T { get; set; }
        public DbSet<UserConfig_T> UserConfig_T { get; set; }
        public DbSet<UserConfigType_T> UserConfigType_T { get; set; }
        public DbSet<UserIp_T> UserIp_T { get; set; }
        public DbSet<UserPower_T> UserPower_T { get; set; }
        public DbSet<UserTime_T> UserTime_T { get; set; }
        public DbSet<WorkDynamic_T> WorkDynamic_T { get; set; }
        public DbSet<WorkReport_T> WorkReport_T { get; set; }
        public DbSet<WorkReportModel_T> WorkReportModel_T { get; set; }
        public DbSet<Answer_T> Answer_T { get; set; }
        public DbSet<BankInfo_T> BankInfo_T { get; set; }
        public DbSet<ChanceSource_T> ChanceSource_T { get; set; }
        public DbSet<DesktopClient_T> DesktopClient_T { get; set; }
        public DbSet<DesktopOne_T> DesktopOne_T { get; set; }
        public DbSet<DesktopThree_T> DesktopThree_T { get; set; }
        public DbSet<DocFolder_T> DocFolder_T { get; set; }
        public DbSet<DocFolderShared_T> DocFolderShared_T { get; set; }
        public DbSet<DocLable_T> DocLable_T { get; set; }
        public DbSet<DocShared_T> DocShared_T { get; set; }
        public DbSet<DocumentManagement_T> DocumentManagement_T { get; set; }
        public DbSet<Dynamic_T> Dynamic_T { get; set; }
        public DbSet<DynamicLink_T> DynamicLink_T { get; set; }
        public DbSet<DynamicRecovery_T> DynamicRecovery_T { get; set; }
        public DbSet<ExcelModel_T> ExcelModel_T { get; set; }
        public DbSet<Folder_T> Folder_T { get; set; }
        public DbSet<Message_T> Message_T { get; set; }
        public DbSet<MessageClient_T> MessageClient_T { get; set; }
        public DbSet<MessageClientNew_T> MessageClientNew_T { get; set; }
        public DbSet<MessageNew_T> MessageNew_T { get; set; }
        public DbSet<PendingClerk_T> PendingClerk_T { get; set; }
        public DbSet<ProductPrice_T> ProductPrice_T { get; set; }
        public DbSet<ShareFolder_T> ShareFolder_T { get; set; }
        public DbSet<TestPaper_T> TestPaper_T { get; set; }
        public DbSet<TestQuestions_T> TestQuestions_T { get; set; }
        public DbSet<Warning_T> Warning_T { get; set; }
        public DbSet<WarningClerk_T> WarningClerk_T { get; set; }
        public DbSet<WarningCondition_T> WarningCondition_T { get; set; }
        public DbSet<WarningConfig_T> WarningConfig_T { get; set; }
        public DbSet<WarningSqlConfig_T> WarningSqlConfig_T { get; set; }
        public DbSet<Calendar_V> Calendar_V { get; set; }
        public DbSet<Chance_V> Chance_V { get; set; }
        public DbSet<ClientFollow_V> ClientFollow_V { get; set; }
        public DbSet<clientpro_V> clientpro_V { get; set; }
        public DbSet<InqOneAllInfo_V> InqOneAllInfo_V { get; set; }
        public DbSet<Inquiry_V> Inquiry_V { get; set; }
        public DbSet<product_V> product_V { get; set; }
        public DbSet<Sell_V> Sell_V { get; set; }
        public DbSet<TimeZhou_V> TimeZhou_V { get; set; }
    
        [EdmFunction("TCRMEntities", "GetBoss_F")]
        public virtual IQueryable<GetBoss_F_Result> GetBoss_F(string userIdStr, Nullable<int> inme)
        {
            var userIdStrParameter = userIdStr != null ?
                new ObjectParameter("userIdStr", userIdStr) :
                new ObjectParameter("userIdStr", typeof(string));
    
            var inmeParameter = inme.HasValue ?
                new ObjectParameter("inme", inme) :
                new ObjectParameter("inme", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetBoss_F_Result>("[TCRMEntities].[GetBoss_F](@userIdStr, @inme)", userIdStrParameter, inmeParameter);
        }
    
        [EdmFunction("TCRMEntities", "GetUnderling_F")]
        public virtual IQueryable<GetUnderling_F_Result> GetUnderling_F(string userId, Nullable<int> inme)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var inmeParameter = inme.HasValue ?
                new ObjectParameter("inme", inme) :
                new ObjectParameter("inme", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUnderling_F_Result>("[TCRMEntities].[GetUnderling_F](@userId, @inme)", userIdParameter, inmeParameter);
        }
    
        [EdmFunction("TCRMEntities", "SplitString_F")]
        public virtual IQueryable<SplitString_F_Result> SplitString_F(string input, string separator, Nullable<bool> removeEmptyEntries)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("Separator", separator) :
                new ObjectParameter("Separator", typeof(string));
    
            var removeEmptyEntriesParameter = removeEmptyEntries.HasValue ?
                new ObjectParameter("RemoveEmptyEntries", removeEmptyEntries) :
                new ObjectParameter("RemoveEmptyEntries", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_F_Result>("[TCRMEntities].[SplitString_F](@Input, @Separator, @RemoveEmptyEntries)", inputParameter, separatorParameter, removeEmptyEntriesParameter);
        }
    
        [EdmFunction("TCRMEntities", "StringToTable_F")]
        public virtual IQueryable<StringToTable_F_Result> StringToTable_F(string str, string split)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var splitParameter = split != null ?
                new ObjectParameter("split", split) :
                new ObjectParameter("split", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<StringToTable_F_Result>("[TCRMEntities].[StringToTable_F](@str, @split)", strParameter, splitParameter);
        }
    
        [EdmFunction("TCRMEntities", "StringToTableEx_F")]
        public virtual IQueryable<StringToTableEx_F_Result> StringToTableEx_F(string str, string split)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var splitParameter = split != null ?
                new ObjectParameter("split", split) :
                new ObjectParameter("split", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<StringToTableEx_F_Result>("[TCRMEntities].[StringToTableEx_F](@str, @split)", strParameter, splitParameter);
        }
    
        public virtual int SaveStockPro(Nullable<int> id, Nullable<int> stockId, string stockNo, Nullable<long> productId, string no, string enName, string cnName, string model, string spec, Nullable<decimal> freight, Nullable<decimal> num, string packing, string unit, Nullable<decimal> unitPrice, Nullable<decimal> sUnitPrice, Nullable<decimal> sCostPrice, Nullable<System.DateTime> validDate, string bak, string creater, string createrName, Nullable<System.DateTime> createTm)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("StockId", stockId) :
                new ObjectParameter("StockId", typeof(int));
    
            var stockNoParameter = stockNo != null ?
                new ObjectParameter("StockNo", stockNo) :
                new ObjectParameter("StockNo", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(long));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            var cnNameParameter = cnName != null ?
                new ObjectParameter("CnName", cnName) :
                new ObjectParameter("CnName", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var specParameter = spec != null ?
                new ObjectParameter("Spec", spec) :
                new ObjectParameter("Spec", typeof(string));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("Num", num) :
                new ObjectParameter("Num", typeof(decimal));
    
            var packingParameter = packing != null ?
                new ObjectParameter("Packing", packing) :
                new ObjectParameter("Packing", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var sUnitPriceParameter = sUnitPrice.HasValue ?
                new ObjectParameter("SUnitPrice", sUnitPrice) :
                new ObjectParameter("SUnitPrice", typeof(decimal));
    
            var sCostPriceParameter = sCostPrice.HasValue ?
                new ObjectParameter("SCostPrice", sCostPrice) :
                new ObjectParameter("SCostPrice", typeof(decimal));
    
            var validDateParameter = validDate.HasValue ?
                new ObjectParameter("ValidDate", validDate) :
                new ObjectParameter("ValidDate", typeof(System.DateTime));
    
            var bakParameter = bak != null ?
                new ObjectParameter("Bak", bak) :
                new ObjectParameter("Bak", typeof(string));
    
            var createrParameter = creater != null ?
                new ObjectParameter("Creater", creater) :
                new ObjectParameter("Creater", typeof(string));
    
            var createrNameParameter = createrName != null ?
                new ObjectParameter("CreaterName", createrName) :
                new ObjectParameter("CreaterName", typeof(string));
    
            var createTmParameter = createTm.HasValue ?
                new ObjectParameter("CreateTm", createTm) :
                new ObjectParameter("CreateTm", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveStockPro", idParameter, stockIdParameter, stockNoParameter, productIdParameter, noParameter, enNameParameter, cnNameParameter, modelParameter, specParameter, freightParameter, numParameter, packingParameter, unitParameter, unitPriceParameter, sUnitPriceParameter, sCostPriceParameter, validDateParameter, bakParameter, createrParameter, createrNameParameter, createTmParameter);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Configuration;
using System.Data.SqlClient;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Text.RegularExpressions;
using AppApi.App_Data;
using AppApi;
using AppApi.Controllers;
using System.IO;

namespace AppApi.Tools
{
    public class file 
    {
        public static string luj = System.AppDomain.CurrentDomain.BaseDirectory + @"file\"; //获取文件路径
        public static filereturn Savefile(filest filest)//上传文件
        {
            Stream StreamObject = FileBinaryConvertHelper.BytesToStream(filest.filebyte);
            filereturn result = new Tools.filereturn();
            TCRMCLASS.FileClass fc = new TCRMCLASS.FileClass();
            TCRMCLASS.FileInfoEx fileinfo = new TCRMCLASS.FileInfoEx();
            fileinfo.fileclass = filest.fileclass; //文件种类(0普通附件，1邮件原文，2邮件附件，3文档附件)
            fileinfo.filename = filest.FileName; //文件名称
            fileinfo.filetype = filest.ContentType; //文件的mime类型
            TCRMCLASS.FileResult fResult = fc.saveFile(StreamObject, fileinfo);
            if (!fResult.IsSuccess)
            {
                result.ErrorMessage = fResult.ErrMsg;

                result.State = 0;
                return result;
            }
            TCRMCLASS.DBClass db1 = new TCRMCLASS.DBClass();
            string tcrmdb = ConfigurationManager.AppSettings["dbname"];
            string filedb = db1.getServerConfig("SYSTEM_FILEDB");
            SqlCommand comm = db1.getSqlCommand(@"insert into " + tcrmdb + @"MAIL.dbo.MailAcc_T (MailBoxId, MailId, FileName, FileType, FileSize, ContentID, DownloadID,FileDb, FileId, FileStoreId, FileRoot, FileKey, FileStore,FileZip,Creater)
        values (@MailBoxId, @MailId, @FileName, @FileType, @FileSize, @ContentID, @DownloadID, @FileDb, @FileId, @FileStoreId, @FileRoot, @FileKey, @FileStore,@FileZip,@Creater)");
            if(filest.mailboxid==null)
                comm.Parameters.AddWithValue("@MailBoxId", DBNull.Value);
            else
                 comm.Parameters.AddWithValue("@MailBoxId", filest.mailboxid);
            if (filest.mailid == null)
                comm.Parameters.AddWithValue("@MailId", DBNull.Value);
            else
                comm.Parameters.AddWithValue("@MailId", filest.mailid);

            comm.Parameters.AddWithValue("@FileName", TCRMCLASS.DealString.GetRealSizeStringR(Path.GetFileName(filest.FileName), 150));
            comm.Parameters.AddWithValue("@FileType", filest.ContentType);
            comm.Parameters.AddWithValue("@FileSize", filest.filebyte.Length);
            if (filest.strDid == null)
                comm.Parameters.AddWithValue("@ContentID", DBNull.Value);
            else
                comm.Parameters.AddWithValue("@ContentID", filest.strDid);
            comm.Parameters.AddWithValue("@DownloadID", filest.DownloadID);
            if (fResult.FileStore == "DB")
            {
                comm.Parameters.AddWithValue("@FileDb", fResult.FileDb);
                comm.Parameters.AddWithValue("@FileId", fResult.FileId);
                comm.Parameters.AddWithValue("@FileStoreId", DBNull.Value);
                comm.Parameters.AddWithValue("@FileRoot", DBNull.Value);
                comm.Parameters.AddWithValue("@FileKey", DBNull.Value);
            }
            else
            {
                comm.Parameters.AddWithValue("@FileDb", DBNull.Value);
                comm.Parameters.AddWithValue("@FileId", DBNull.Value);
                comm.Parameters.AddWithValue("@FileStoreId", fResult.FileStoreId);
                comm.Parameters.AddWithValue("@FileRoot", fResult.FileRoot);
                comm.Parameters.AddWithValue("@FileKey", fResult.FileKey);
            }
            comm.Parameters.AddWithValue("@FileStore", fResult.FileStore);
            comm.Parameters.AddWithValue("@FileZip", fResult.FileZip);

            comm.Parameters.AddWithValue("@Creater", filest.userid);
            comm.ExecuteNonQuery();

            result.strId = db1.GetMaxID();
            result.State = 1;
            return result;

        }
        public static string download(string fileclass, string fileid,string filename)
        {
            if (!Directory.Exists(luj))
            {
                Directory.CreateDirectory(System.AppDomain.CurrentDomain.BaseDirectory + @"file");
            }
            try
            {
                TCRMCLASS.FileClass fc = new TCRMCLASS.FileClass();
                string strtemppath = fc.GetDownloadUrl(fileclass, fileid);
                if (strtemppath == "")
                    return "传入类型错误";
                byte[] wj = FileBinaryConvertHelper.FiletoBytes(strtemppath);
                FileBinaryConvertHelper.BytestoFile(wj,luj+filename);
               // FileBinaryConvertHelper.DeleteFile(strtemppath);
                return @"file\" + filename;
            }
            catch(Exception ee)
            {
                return ee.ToString();
            }

        }

        public static string delete(string fileclass, string fileid)
        {
            try
            {
                TCRMCLASS.FileClass fc = new TCRMCLASS.FileClass();
                fc.delFile(fileclass, fileid);
                TCRMCLASS.DBClass db1 = new TCRMCLASS.DBClass();
                string tcrmdb = ConfigurationManager.AppSettings["dbname"];
                SqlCommand comm = db1.getSqlCommand("delete " + tcrmdb + "MAIL.dbo.MailAcc_T where Id in (select ColName from dbo.StringToTable_F(@strid,','))");
                comm.Parameters.AddWithValue("@strid", fileid);
                comm.ExecuteNonQuery();

                return "finish";
            }
            catch (Exception ee)
            {
                return ee.ToString();
            }

        }

    }

    /// <summary>
    /// 工具类：文件与二进制流间的转换
    /// </summary>
    public class FileBinaryConvertHelper
    {
        /// <summary>
        /// 将文件转换为byte数组
        /// </summary>
        /// <param name="path">文件地址</param>
        /// <returns>转换后的byte数组</returns>
        public static byte[] FiletoBytes(string path)
        {
            if (!System.IO.File.Exists(path))
            {
                return new byte[0];
            }

            FileInfo fi = new FileInfo(path);
            byte[] buff = new byte[fi.Length];

            FileStream fs = fi.OpenRead();
            fs.Read(buff, 0, Convert.ToInt32(fs.Length));
            fs.Close();

            return buff;
        }

        /// <summary>
        /// 将byte数组转换为文件并保存到指定地址
        /// </summary>
        /// <param name="buff">byte数组</param>
        /// <param name="savepath">保存地址</param>
        public static void BytestoFile(byte[] buff, string savepath)
        {
            if (System.IO.File.Exists(savepath))
            {
                System.IO.File.Delete(savepath);
            }

            FileStream fs = new FileStream(savepath, FileMode.CreateNew);
            BinaryWriter bw = new BinaryWriter(fs);
            bw.Write(buff, 0, buff.Length);
            bw.Close();
            fs.Close();
        }
        /// <summary>
        /// 删除文件
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        public static int DeleteFile(string path)
        {
            if (System.IO.File.Exists(path))
            {
                System.IO.File.Delete(path);
                return 1;
            }
            else
                return 0;
        }
        /// <summary>
        /// 将stream转换为byte
        /// </summary>
        /// <param name="stream"></param>
        /// <returns></returns>
        public static byte[] StreamToBytes(Stream stream)
        {
            byte[] bytes = new byte[stream.Length];
            stream.Read(bytes, 0, bytes.Length);
            // 设置当前流的位置为流的开始   
            stream.Seek(0, SeekOrigin.Begin);
            return bytes;
        }

        /// 将 byte[] 转成 Stream  
        public static Stream BytesToStream(byte[] bytes)
        {
            Stream stream = new MemoryStream(bytes);
            return stream;
        }
    }

    public class filest
    {
        public string path { get; set; }
        public string userid { get; set; }
        public string fileclass { get; set; }
        public string filetype { get; set; }
        public string FileName { get; set; }
        public string ContentType { get; set; }
        public Nullable<int> mailboxid { get; set; }
        public Nullable<int> mailid { get; set; }
        public string strDid { get; set; }
        public string DownloadID { get; set; }

        public byte[] filebyte
        {
            get; set;
        }
    }

    public class filereturn
    {
        public string ErrorMessage { get; set; }
        public int State { get; set; }
        public string strId { get; set; }
    }

}